from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import httpx

from src.services.bot.app.config import settings
from src.services.bot.app.auth_client import auth_client

router = Router(name="start")

@router.message(CommandStart())
async def handle_start(message: types.Message):
    tg_id = message.from_user.id

    # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —é–∑–µ—Ä–∞ –≤ auth
    async with httpx.AsyncClient(timeout=5.0) as client:
        resp = await client.get(f"{settings.AUTH_SERVICE_URL}/me/{tg_id}")

    if resp.status_code == 200:
        # —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ
        await message.answer(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã ‚úÖ\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/me ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/help ‚Äî –ø–æ–º–æ—â—å"
        )
        return
    if resp.status_code == 404:
    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ (404), –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        
        await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø RecoTg –±–æ—Ç.\n"
        "–Ø –±—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–±–µ –ª—É—á—à–∏–µ Telegram-–∫–∞–Ω–∞–ª—ã.\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=kb
        )
        return
    
    await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè")
    
@router.message(F.contact)
async def got_contact(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.contact or message.contact.user_id != message.from_user.id:
        await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –°–í–û–ô –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º¬ª.")
        return
    
    contact: types.Contact = message.contact
    phone_number = contact.phone_number
    telegram_user_id = message.from_user.id
    
    payload = {
        "phone_number": phone_number,
        "telegram_user_id": telegram_user_id,
    }
    
    async with httpx.AsyncClient(timeout=5) as client:
        resp = await client.post(f"{settings.AUTH_SERVICE_URL}/users", json=payload)

    if resp.status_code in (200, 201):
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω ‚úÖ\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /me")
    else:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ({resp.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
